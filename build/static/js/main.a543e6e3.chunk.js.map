{"version":3,"sources":["utils/constants.js","component/marker/MarkerData.js","component/multiline/MultilineData.js","component/StateResetter.js","container/Map.js","App.js","reportWebVitals.js","index.js"],"names":["DEFAULT_VIEWPORT","center","zoom","MARKER_COLORS","MarkerData","markers","setmarkers","setMapCenter","handleChange","event","index","zoomPort","markCopy","type","color","Math","floor","random","length","latlng","splice","map","marker","CircleMarker","key","onclick","oncontextmenu","Popup","MultilineData","boolenSwitch","setboolenSwitch","useState","multitext","setmultitext","processMultiline","multi_line_data","split","str","marker_data","lineData","props","children","m_color","lat","lng","pattern","RegExp","test","validateLatLng","undefined","textMarker","push","style","textAlign","marginTop","placeholder","value","cols","rows","onChange","e","target","handleTextChange","borderRadius","cursor","backgroundColor","padding","onClick","StateReseter","resetter","state","LeafletMap","mapCenter","viewPort","setviewPort","BaseLayer","LayersControl","Overlay","useEffect","JSON","parse","localStorage","getItem","setItem","stringify","id","Map","doubleClickZoom","animate","duration","bounceAtZoomLimits","maxBoundsViscosity","maxBounds","scrollWheelZoom","viewport","onViewportChanged","changedViewPort","height","width","position","name","TileLayer","url","checked","FeatureGroup","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a543e6e3.chunk.js","sourcesContent":["export const DEFAULT_VIEWPORT = {\n    center: [51.505, -0.09],\n    zoom: 6,\n}\n\nexport const MARKER_COLORS = ['red','blue','green','yellow','orange']","import React from 'react'\nimport {CircleMarker,Popup} from 'react-leaflet'\nimport {MARKER_COLORS} from '../../utils/constants'\n\nexport default function MarkerData({markers,setmarkers,setMapCenter}) {\n\n    const handleChange = (event,index,zoomPort) => {\n        let markCopy=[...markers]\n        if (event.type === 'click'){\n            markCopy[index].color=MARKER_COLORS[Math.floor(Math.random()*MARKER_COLORS.length)]\n            setmarkers(markCopy)    \n            setMapCenter(zoomPort.latlng)\n\n        } else if (event.type === 'contextmenu'){\n            markCopy.splice(index, 1);\n            setmarkers(markCopy);\n        }\n    }\n    \n    return (\n        <>\n        {\n            markers && markers.length !==0 && markers.map((marker,index) => (\n                <CircleMarker\n                    key= {index}\n                    color={marker.color}\n                    center={marker.latlng}\n                    onclick= {(event) => handleChange(event,index,marker)}\n                    oncontextmenu={(event) => handleChange(event,index,marker)}\n                >\n                    <Popup>\n                        Color Changed\n                    </Popup>\n\n                </CircleMarker>\n            ))\n        }\n        </>\n    )\n}\n","import React, {useState} from 'react'\nimport {MARKER_COLORS} from '../../utils/constants'\n\nexport default function MultilineData({\n    markers,boolenSwitch,setboolenSwitch\n}) {\n\n    const [multitext, setmultitext] = useState('')\n\n    function validateLatLng(lat, lng) {    \n        let pattern = new RegExp('^-?([1-8]?[1-9]|[1-9]0)\\\\.{1}\\\\d{1,6}');\n        return pattern.test(lat) && pattern.test(lng);\n      }\n\n    const processMultiline = () => {\n        let multi_line_data =  multitext.split('\\n').map(str => <p>{str}</p>)\n        multitext !== '' && multi_line_data.map((marker_data) => {\n            var lineData = marker_data.props.children.split(',')\n            let m_color = MARKER_COLORS[Math.floor(Math.random()*MARKER_COLORS.length)]\n            let validator = validateLatLng(lineData[0], lineData[1])\n            if (validator) {\n                if (lineData[2] !== undefined){\n                    m_color = lineData[2]\n                }\n                let textMarker = {\n                    latlng : [lineData[0], lineData[1]],\n                    color: m_color\n                }\n                markers.push(textMarker)\n            }\n        })\n        setboolenSwitch(!boolenSwitch)\n        setmultitext('')\n     }\n \n     const handleTextChange = (e) => {\n         setmultitext(e.target.value)\n     }\n\n    return (\n        <div style= {{textAlign : 'center',marginTop:'1%'}}>\n            <textarea placeholder=\"Enter latitude and longitude, separated by a comma.\"\n                value={multitext} cols=\"50\" rows=\"5\" onChange={(e) =>handleTextChange(e)} />\n            <div style= {{marginTop:'1px'}}>\n                <button style={{\n                    borderRadius: '10px',cursor:'pointer',color:'white',backgroundColor:'black',padding:'5px 12px',}}\n                    onClick = {() => processMultiline()}>\n                        Submit\n                </button>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nexport default function StateReseter({resetter,state}) {\n\n    const resetState = () => {\n        resetter(state)\n    }\n\n    return (\n        <div style={{textAlign:\"center\", marginTop:'1%'}}>\n            <button style={{backgroundColor:'#f44336',padding:'5px 12px',cursor:'pointer',\n            color:'white',borderRadius:'10px'}} onClick = {() => resetState()}>\n                Reset Markers\n            </button>\n        </div>\n    )\n}\n","import React, {useState,useEffect} from \"react\";\nimport { Map as MapContainer, TileLayer, LayersControl,FeatureGroup } from \"react-leaflet\";\nimport {MARKER_COLORS, DEFAULT_VIEWPORT} from '../utils/constants'\nimport MarkerData from '../component/marker/MarkerData'\nimport MultiLineDataInput from '../component/multiline/MultilineData'\nimport StateResetter from '../component/StateResetter'\n\nconst LeafletMap = () => {\n\n    const [mapCenter, setMapCenter] = useState(DEFAULT_VIEWPORT.center)\n    const [markers, setmarkers] = useState([])\n    const [viewPort, setviewPort] = useState(DEFAULT_VIEWPORT)\n    const [boolenSwitch, setboolenSwitch] = useState(false)\n\n    const { BaseLayer, Overlay } = LayersControl\n\n    useEffect(() => {\n        setmarkers(JSON.parse(localStorage.getItem('local_marker_data')))\n        setviewPort(JSON.parse(localStorage.getItem('local_view_port')))\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('local_marker_data', JSON.stringify(markers));\n        localStorage.setItem('local_view_port', JSON.stringify(viewPort));\n    },[markers,viewPort,boolenSwitch])\n\n    const addMarker = (e) => {\n        setmarkers([...markers , {latlng: e.latlng,\n            color: MARKER_COLORS[Math.floor(Math.random()*MARKER_COLORS.length)]}])\n    }\n\n    const onViewportChanged = (changedViewPort) => {\n        setviewPort(changedViewPort)\n        setMapCenter(changedViewPort.center)\n    }\n\n  return (\n    <>\n        <div id=\"mapid\">\n            <MapContainer center={mapCenter} zoom={viewPort.zoom}\n            doubleClickZoom={true} animate={true} duration={3} bounceAtZoomLimits={true} maxBoundsViscosity={0.95} \n            maxBounds={[[-360, -180], [360, 180]]} onclick={addMarker} scrollWheelZoom={false} viewport={viewPort} \n            onViewportChanged={onViewportChanged} style={{height:\"500px\",width: \"100%\"}}>\n                <LayersControl position=\"topright\">\n                    <BaseLayer name=\"OpenStreetMap\">\n                        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n                    </BaseLayer>\n                    <BaseLayer checked={true} name=\"Dark\">\n                        <TileLayer url=\"https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}@2x.png\" />\n                    </BaseLayer>\n\n                    <Overlay checked={true} name=\"Buggy\">\n                        <FeatureGroup>\n                            <MarkerData markers={markers} setMapCenter={setMapCenter} setmarkers={setmarkers} />\n                        </FeatureGroup>\n                    </Overlay>\n                </LayersControl>  \n            </MapContainer>\n        </div>\n        <MultiLineDataInput markers={markers} setboolenSwitch={setboolenSwitch}\n        boolenSwitch= {boolenSwitch}/>\n        <StateResetter resetter={setmarkers} state={[]}  />\n   </>\n  );\n};\nexport default LeafletMap;","import React from 'react'\nimport Map from './container/Map'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}